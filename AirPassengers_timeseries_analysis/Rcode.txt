x = 70
y = 24
x + y
r --version
R --version
library(tidyverse)
install.packages("tidyverse", "vroom")
install.packages(c("tidyverse", "vroom", "Sf", "tigris", "leaflet"))
install.packages("tidyverse")
install.packages(c("tidyverse", "vroom", "Sf", "tigris", "leaflet"))
install.packages(c("tidyverse", "vroom", "sf", "tigris", "leaflet"))
options(timeout = 200)
install.packages(c("tidyverse", "vroom", "sf", "tigris", "leaflet", "htmlwidgets", "dplyr", "tidyr", "ggplot2", "lubridate"))
#percentpos <- vroom("coronavirus-data-master/trends/percentpositive-by-modzcta.csv")
caserate <- vroom("caserate-by-modzcta.csv", delim = ",")   #>>Done
library(tidyverse)
library(vroom)
library(sf)
library(tigris)
library(leaflet)
library(htmlwidgets)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
options(tigris_use_cache = TRUE)
#percentpos <- vroom("coronavirus-data-master/trends/percentpositive-by-modzcta.csv")
caserate <- vroom("caserate-by-modzcta.csv", delim = ",")   #>>Done
setwd("C:\\Users\\Administrator\\Desktop\\R_projects\\R_Shiny")
library(tidyverse)
library(vroom)
library(sf)
library(tigris)
library(leaflet)
library(htmlwidgets)
library(tidyverse)
library(vroom)
library(sf)
library(tigris)
library(leaflet)
library(htmlwidgets)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
#percentpos <- vroom("coronavirus-data-master/trends/percentpositive-by-modzcta.csv")
caserate <- vroom("caserate-by-modzcta.csv", delim = ",")   #>>Done
getwd()
cd Desktop
setwd("C:/Desktop/R_projects/R_shiny")
setwd("C://Desktop//R_projects//R_shiny")
setwd("C:/Desktop/R_Projects/R_Shiny")
setwd("C://Desktop//R_Projects//R_Shiny")
setwd(C://Desktop//R_Projects//R_Shiny)
setwd("C:\Users\Work\Desktop\R_Projects\R_Shiny")
setwd("C:\\Users\\Work\\Desktop\\R_Projects\\R_Shiny")
install.packages(c("forecast", "tseries", "ggpplot2"))
library(forecast)
library(tseries)
library(ggplot2)
data("AirPassengers")
?AirPassengers
setwd("C:\\Users\\Work\\Desktop\\R_Projects\\R_Shiny\\AirPassengers_timeseries_analysis")
str(AirPassengers)
class(AirPassengers)
start(AirPassengers)
head(AirPassengers)
tail(AirPassengers)
frequency(AirPassengers)
help("frequency")
attributes(AirPassengers)
help("attributes")
time(AirPassengers)
?AirPassengers
plot(AirPassengers)
help(plot)
plot(AirPassengers, type = "S")
plot(AirPassengers, type = "s")
plot(AirPassengers, type = "S")
plot(AirPassengers, type = "p")
plot(AirPassengers, type = "l")
plot(AirPassengers)
plot(AirPassengers, type = "b")
plot(AirPassengers, type = "c")
plot(AirPassengers, type = "o")
plot(AirPassengers, type = "h")
plot(AirPassengers, type = "n")
require(stats)
require(graphics)
plot(cars)
lines(lowess(cars))
lines(lowess(AirPassengers))
lines(lowess(AirPassengers))
plot(sin, -pi, 2*pi)
plot(sin, -pi)
plot(sin, -pi, 2*pi, 3*pi)
plot(1,2,3,4)
plot(sin, 1, 2, 3 ,4)
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,)
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10, )
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10, main = "rpois(100, lamda = 5)" )
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 100, main = "rpois(100, lamda = 5)" )
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 1, main = "rpois(100, lamda = 5)" )
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 9, main = "rpois(100, lamda = 5)" )
plot(AirPassengers, main = "Monthly Airline Passengers (1949-1960)")
plot(AirPassengers, main = "Monthly Airline Passengers (1949-1960)", col = "red")
abline(reg = lm(AirPassengers~time(AirPassengers)))
plot(sin, -pi)
abline(reg = lm(AirPassengers~time(AirPassengers)))
plot(AirPassengers, main = "Monthly Airline Passengers (1949-1960)", col = "red")
abline(reg = lm(AirPassengers~time(AirPassengers)))
plot(aggregate(AirPassengers, FUN = mean))
abline(reg = lm(AirPassengers~time(AirPassengers)))
boxplot(AirPassengers~cycle(AirPassengers), main = "Air passengers seasonality cycle", cex.main = 1.5, col = "steelblue", col.main = "blue")
help("boxplot")
help("boxplot")
boxplot(AirPassengers~cycle(AirPassengers), main = "Air passengers seasonality cycle", cex.main = 1.5, col = "steelblue", col.main = "blue")
static_AirPassengers <- log(AirPassengers)
plot(static_AirPassengers, main = "Monthly Airline Passengers (1949 - 1960)", col.main = "blue")
plot(AirPassengers)
plot(AirPassengers)
plot(static_AirPassengers, main = "Monthly Airline Passengers (1949 - 1960)", col.main = "blue")
passengers_ts <- ts(static_AirPassengers, start = c(1949, 1), frequency = 12)
decomposed_passengers <- stl(passengers_ts, s.window = "periodic")
View(decomposed_passengers)
View(decomposed_passengers)
plot(decomposed_passengers, main = "Seasonal Composition")
help(stl)
plot(decomposed_passengers, main = "Seasonal Composition")
adf.test(passengers_ts)
diff_passengers <- diff(passengers_ts)
plot(diff_passengers, main = "Differentiated time series data", col.main = "blue", cex.main = 1.5)
plot(diff_passengers, main = "Differentiated time series data", col.main = "blue", cex.main = 5.5)
plot(diff_passengers, main = "Differentiated time series data", col.main = "blue", cex.main = 1.5)
acf(diff_passengers)
pacf(diff_passengers)
airma_model <- auto.arima(passengers_ts)
summary(airma_model)
pred <- predict(airma_model, n.ahead = 10*12)
checkresiduals(airma_model)
forecast_values <- forecast(airma_model, h = 24)
plot(forecast_values)
View(forecast_values)
View(forecast_values)
forecst_df <- data.frame (Date = time(forecast_values$mean), Forecast = as.numeric(forecast_values$mean, Lower = as.numeric(forecast_values$lower[,2]), Upper = as.numeric(forecast_values$upper[,2])))
ggplot(forecst_df, aes(x=Date, y=Forecast)) + geom_line() + theme_classic()+, geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2) + labs(title = " Air Passengers Forecast", x = "Year", y = "Passengers")
ggplot(forecst_df, aes(x=Date, y=Forecast)) + geom_line() + theme_classic()+ geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2) + labs(title = " Air Passengers Forecast", x = "Year", y = "Passengers")
View(forecst_df)
View(forecst_df)
forecst_df <- data.frame (Date = time(forecast_values$mean), Forecast = as.numeric(forecast_values$mean), Lower = as.numeric(forecast_values$lower[,2]), Upper = as.numeric(forecast_values$upper[,2])))
forecst_df <- data.frame (Date = time(forecast_values$mean), Forecast = as.numeric(forecast_values$mean), Lower = as.numeric(forecast_values$lower[,2]), Upper = as.numeric(forecast_values$upper[,2]))
ggplot(forecst_df, aes(x=Date, y=Forecast)) + geom_line() + theme_classic()+ geom_ribbon(aes(ymin = Lower, ymax = Upper), alpha = 0.2) + labs(title = " Air Passengers Forecast", x = "Year", y = "Passengers")
